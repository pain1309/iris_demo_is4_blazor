@page "/create-order"

@using Blazor.Wasm.BusinessClient.Refactor.Models
@using Blazor.Wasm.BusinessClient.Refactor.Services

@inject NavigationManager NavigationManager

<h1 class="bg-info text-white">Create Ordering</h1>

<EditForm Model="orderCreate" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>First Name</label>
        <ValidationMessage For="@(() => orderCreate.FirstName)" />
        <InputText class="form-control" @bind-Value="orderCreate.FirstName" />
    </div>
    <div class="form-group">
        <label>Last Name</label>
        <ValidationMessage For="@(() => orderCreate.LastName)" />
        <InputText class="form-control" @bind-Value="orderCreate.LastName" />
    </div>
    <div class="form-group">
        <label>User Name</label>
        <ValidationMessage For="@(() => orderCreate.UserName)" />
        <InputText class="form-control" @bind-Value="orderCreate.UserName" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <ValidationMessage For="@(() => orderCreate.EmailAddress)" />
        <InputText class="form-control" @bind-Value="orderCreate.EmailAddress" />
    </div>
    <div class="form-group">
        <label>Country</label>
        <ValidationMessage For="@(() => orderCreate.Country)" />
        <InputText class="form-control" @bind-Value="orderCreate.Country" />
    </div>
    <div class="form-group">
        <label>Card Name</label>
        <ValidationMessage For="@(() => orderCreate.CardName)" />
        <InputText class="form-control" @bind-Value="orderCreate.CardName" />
    </div>
    <div class="form-group">
        <label>Card Number</label>
        <ValidationMessage For="@(() => orderCreate.CardNumber)" />
        <InputText class="form-control" @bind-Value="orderCreate.CardNumber" />
    </div>
    <div class="form-group">
        <label>CVV</label>
        <ValidationMessage For="@(() => orderCreate.CVV)" />
        <InputText class="form-control" @bind-Value="orderCreate.CVV" />
    </div>
    <div class="form-group">
        <label>Expiration</label>
        <ValidationMessage For="@(() => orderCreate.Expiration)" />
        <InputText class="form-control" @bind-Value="orderCreate.Expiration" />
    </div>
    <div class="form-group">
        <label>Payment Method</label>
        <ValidationMessage For="@(() => orderCreate.PaymentMethod)" />
        <InputNumber class="form-control" @bind-Value="orderCreate.PaymentMethod" />
    </div>
    <div class="form-group">
        <label>ZipCode</label>
        <ValidationMessage For="@(() => orderCreate.ZipCode)" />
        <InputText class="form-control" @bind-Value="orderCreate.ZipCode" />
    </div>
    <div class="form-group">
        <label>Total Price</label>
        <ValidationMessage For="@(() => orderCreate.TotalPrice)" />
        <InputNumber class="form-control" @bind-Value="orderCreate.TotalPrice" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Click</button>
    </div>
</EditForm>

@code {
    [Inject]
    public IOrderingService OrderingService { get; set; }

    public Ordering orderCreate = new Ordering()
    {
        CardName = "VU VAN ANH",
        CardNumber = "123456789",
        Country = "Viet Nam",
        CVV = "111",
        EmailAddress = "anhvv@1target.vn",
        Expiration = "10/10/2010",
        FirstName = "Vũ",
        LastName = "Văn Anh",
        PaymentMethod = 1,
        TotalPrice = 1234,
        UserName = "vananh",
        ZipCode = "111111"
    };
    Ordering ReceivedOrdering;
    public string FormSubmitMessage { get; set; } = "Ordering Not Created";

    public async Task HandleValidSubmit()
    {
        ReceivedOrdering = new Ordering();
        await OrderingService.CreateOrdering(orderCreate);
        NavigationManager.NavigateTo("/");
    }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Ordering";
}